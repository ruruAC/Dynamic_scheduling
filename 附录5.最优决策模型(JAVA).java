package day101;
import java.util.*;
import java.util.Date;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public class Demo{
	/*
	 * 使用时间类 
	 * 将含有时间信息的字符串转换为具体数值，以实现时间的减法运算。
	 * 获得结果为分钟差
	 */
	public static int dateToStamp1(String bgtime, String edtime) throws ParseException {
		long nd = 1000 * 24 * 60 * 60;
	    long nh = 1000 * 60 * 60;
	    long nm = 1000 * 60;
	    SimpleDateFormat simpleFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	    long from = simpleFormat.parse(bgtime).getTime();
	    long to = simpleFormat.parse(edtime).getTime();
	    long hour =(to - from) % nd / nh;
	    long minute =(to - from) % nd % nh/nm;
	    double hours=(double)hour;
	    double minutes=(double)minute;
	    int a=(int)hours;
	    int b=(int)minutes;
	    return a*60+b;
	}
	/*
	 *同上 
	 *将含有时间信息的字符串转换为具体数值，以实现时间的减法运算。
	 *获得结果为小时差 
	 */
	public static int dateToStamp2(String bgtime, String edtime) throws ParseException {
		long nd = 1000 * 24 * 60 * 60;
	    long nh = 1000 * 60 * 60;
	    long nm = 1000 * 60;
	    SimpleDateFormat simpleFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	    long from = simpleFormat.parse(bgtime).getTime();
	    long to = simpleFormat.parse(edtime).getTime();
	    long hour =(to - from) % nd / nh;
	    long minute =(to - from) % nd % nh/nm;
	    double hours=(double)hour;
	    double minutes=(double)minute;
	    int a=(int)hours;
	    int b=(int)minutes;
	    return a;
	}
	/*
	 * 主程序
	 */
	public static void main(String[] args) throws ParseException {
		String[] edtime = new String[1001];			//结束时间
		int[] carnumber = new int[1001];			//每个时间段的对应已有蓄车池数量
		int[] people = new int[1001];				//每个航班时段潜在乘客数量
		/*
		 * 旺季的收益分不
		 * 通过将小概率的概率值乘5000 获得相应个数的收益值
		 * 然后放入数组中，使用Random 获取随机数 达到   统计随机模拟   的效果
		 */
		int[] money = {};
		Scanner sc = new Scanner(System.in);
		for(int i=0;i<1000;i++) {
			edtime[i] = "2014-11-03 "+sc.next()+":00";
			if(i>=0&&i<23) {
				carnumber[i] = 224;
				people[i] = 6;
			}
			if(i>=23&&i<32) {
				carnumber[i] = 149;
				people[i] = 14;
			}
			if(i>=32&&i<33) {
				carnumber[i] = 0;
				people[i] = 73;
			}
			if(i>=33&&i<36) {
				carnumber[i] = 0;
				people[i] = 25;
			}
			if(i>=36&&i<48) {
				carnumber[i] = 39;
				people[i] = 5;
			}
			if(i>=48&&i<75) {
				carnumber[i] = 29;
				people[i] = 4;
			}
			if(i>=75&&i<97) {
				carnumber[i] = 212;
				people[i] = 15;
			}
			if(i>=97&&i<123) {
				carnumber[i] = 111;
				people[i] = 14;
			}
			if(i>=123&&i<157) {
				carnumber[i] = 235;
				people[i] = 11;
			}
			if(i>=157&&i<233) {
				carnumber[i] = 167;
				people[i] = 5;
			}
			if(i>=233&&i<295) {
				carnumber[i] = 275;
				people[i] = 5;
			}
			if(i>=295&&i<327) {
				carnumber[i] = 462;
				people[i] = 12;
			}
			if(i>=327&&i<360) {
				carnumber[i] = 345;
				people[i] = 12;
			}
			if(i>=360&&i<420) {
				carnumber[i] = 416;
				people[i] = 8;
			}
			if(i>=420&&i<478) {
				carnumber[i] = 355;
				people[i] = 9;
			}
			if(i>=478&&i<546) {
				carnumber[i] = 571;
				people[i] = 8;
			}
			if(i>=546&&i<593) {
				carnumber[i] = 703;
				people[i] = 13;
			}
			if(i>=593&&i<641) {
				carnumber[i] = 575;
				people[i] = 13;
			}
			if(i>=641&&i<703) {
				carnumber[i] = 487;
				people[i] = 6;
			}
			if(i>=703&&i<759) {
				carnumber[i] = 534;
				people[i] = 7;
			}
			if(i>=759&&i<827) {
				carnumber[i] = 475;
				people[i] = 5;
			}
			if(i>=827&&i<895) {
				carnumber[i] = 737;
				people[i] = 5;
			}
			if(i>=895&&i<949) {
				carnumber[i] = 761;
				people[i] = 4;
			}
			if(i>=949&&i<1000) {
				carnumber[i] = 421;
				people[i] = 3;
			}
		}
		
		/*
		 * 最优效率决策模型
		 * 独立地  对每分钟来的司机决策进行模拟
		 */
		double[] ans = new double[1440];	//收益	
		int[] select = new int[1440];		//决策 -1---返回       大于-1 ---  留下 
		String[] get = new String[1440];	//接客时间
		int js = 0;
		for(int z=0;z<24;z++) {
			for(int w=0;w<60;w++) {
				String bgtime = "";
				if(z < 10) {
					if(w < 10) {
						bgtime = "2014-11-03 0" + z + ":0" + w +":00";
					}else {
						bgtime = "2014-11-03 0" + z + ":" + w +":00";
					}
				}else {
					if(w < 10) {
						bgtime = "2014-11-03 " + z + ":0" + w +":00";
					}else {
						bgtime = "2014-11-03 " + z + ":" + w +":00";
					}
				}
				
//				String bgtime = "2014-11-03 " + sc.next() +":00";
				int bookhour = dateToStamp2("2014-11-03 00:00:00",bgtime);
				int book = 0;
				switch(bookhour) {
					case 0:
						book = 0;
						break;
					case 1:
						book = 23;
						break;
					case 2:
						book = 32;
						break;
					case 3:
						book = 33;
						break;
					case 4:
						book = 36;
						break;
					case 5:
						book = 48;
						break;
					case 6:
						book = 75;
						break;
					case 7:
						book = 97;
						break;
					case 8:
						book = 123;
						break;
					case 9:
						book = 157;
						break;
					case 10:
						book = 233;
						break;
					case 11:
						book = 295;
						break;
					case 12:
						book = 327;
						break;
					case 13:
						book = 360;
						break;
					case 14:
						book = 420;
						break;
					case 15:
						book = 478;
						break;
					case 16:
						book = 546;
						break;
					case 17:
						book = 593;
						break;
					case 18:
						book = 641;
						break;
					case 19:
						book = 703;
						break;
					case 20:
						book = 759;
						break;
					case 21:
						book = 827;
						break;
					case 22:
						book = 895;
						break;
					case 23:
						book = 949;
						break;
				}
				int bookcar = carnumber[book];
				int flag = book;
				while(bookcar > 0) {
					bookcar -= people[book];
					flag = book;
					book++;
					if(book == 1001) {
						break;
					}
				}
				if(book != 1001) {
					int ans1 = dateToStamp1(bgtime,edtime[flag]);
					if(ans1<0) ans1 = 0;
					int number1 = new Random().nextInt(4950);
					double ans2;
					if(ans1 == 0)
						ans2 =(double)money[number1];
					else
						ans2 =(double)money[number1]/ans1;
					
					int number2 = new Random().nextInt(4950);
					double ans3 = (double)(money[number2]-24)/54;
					
					System.out.println(edtime[flag]);
					
					BigDecimal data1 = new BigDecimal(ans2);
					BigDecimal data2 = new BigDecimal(ans3);
					if(data1.compareTo(data2)==-1) {
						System.out.println("司机决定返回市区接客，收益为："+ ans3 +"(元/分钟)");
						System.out.println("无穷");
//						ans[js] = ans3;
//						select[js] = -1;
					}else if(data1.compareTo(data2)==1) {
						System.out.println("司机决定留在机场接客，收益为："+ ans2 +"(元/分钟)"+ "  等待时间："+ ans1);
						System.out.println(ans1);
//						ans[js] = ans2;
//						select[js] = ans1;
					}else {
						System.out.println("两个决策的收益一样，收益为："+ ans2 +"(元/分钟)");
						System.out.println(ans1);
//						ans[js] = ans2;
//						select[js] = ans1;
					}	
				}else {
					int number2 = new Random().nextInt(4950);
					double ans3 = (double)(money[number2]-24)/54;
					System.out.println("司机仅能选择决策——返回市区，此时收益为："+ ans3 +"(元/分钟)");
					System.out.println("无穷");
//					ans[js] = ans3;
//					select[js] = -1;
				}
//				get[js] =""+bgtime;
//				js++;
			}
		}
/*
		int []kkk = new int[60];
		for(int i=0;i<60;i++) {
			int r = new Random().nextInt(1440);
			kkk[i] = r; 
			switch(r/60) {
				case 0:
					System.out.println(224);
					break;
				case 1:
					System.out.println(149);
					break;
				case 2:
					System.out.println(0);
					break;
				case 3:
					System.out.println(0);
					break;
				case 4:
					System.out.println(39);
					break;
				case 5:
					System.out.println(29);
					break;
				case 6:
					System.out.println(212);
					break;
				case 7:
					System.out.println(111);
					break;
				case 8:
					System.out.println(235);
					break;
				case 9:
					System.out.println(167);
					break;
				case 10:
					System.out.println(275);
					break;
				case 11:
					System.out.println(462);
					break;
				case 12:
					System.out.println(345);
					break;
				case 13:
					System.out.println(416);
					break;
				case 14:
					System.out.println(355);
					break;
				case 15:
					System.out.println(571);
					break;
				case 16:
					System.out.println(703);
					break;
				case 17:
					System.out.println(575);
					break;
				case 18:
					System.out.println(487);
					break;
				case 19:
					System.out.println(534);
					break;
				case 20:
					System.out.println(475);
					break;
				case 21:
					System.out.println(737);
					break;
				case 22:
					System.out.println(761);
					break;
				case 23:
					System.out.println(421);
					break;
			}
			System.out.println(ans[r]);
		}
		System.out.println("===========");
		for(int i=0;i<60;i++) {
			System.out.println(select[kkk[i]]);
		}
		System.out.println("===========");
		for(int i=0;i<60;i++) {
			System.out.println(get[kkk[i]]);
		}
*/
	}
}


//旺季
/*
*最优效率决策模型--旺季
*模型内容同淡季
*程序功能同淡季
*
*具体数据 因淡旺季 导致部分数字不同
*/
package day101;
import java.util.*;
import java.util.Date;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public class Demo{

	public static int dateToStamp1(String bgtime, String edtime) throws ParseException {
		long nd = 1000 * 24 * 60 * 60;
	    long nh = 1000 * 60 * 60;
	    long nm = 1000 * 60;
	    SimpleDateFormat simpleFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	    long from = simpleFormat.parse(bgtime).getTime();
	    long to = simpleFormat.parse(edtime).getTime();
	    long hour =(to - from) % nd / nh;
	    long minute =(to - from) % nd % nh/nm;
	    double hours=(double)hour;
	    double minutes=(double)minute;
	    int a=(int)hours;
	    int b=(int)minutes;
	    return a*60+b;
	}
	public static int dateToStamp2(String bgtime, String edtime) throws ParseException {
		long nd = 1000 * 24 * 60 * 60;
	    long nh = 1000 * 60 * 60;
	    long nm = 1000 * 60;
	    SimpleDateFormat simpleFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	    long from = simpleFormat.parse(bgtime).getTime();
	    long to = simpleFormat.parse(edtime).getTime();
	    long hour =(to - from) % nd / nh;
	    long minute =(to - from) % nd % nh/nm;
	    double hours=(double)hour;
	    double minutes=(double)minute;
	    int a=(int)hours;
	    int b=(int)minutes;
	    return a;
	}
	public static void main(String[] args) throws ParseException {
		String[] edtime = new String[1127];
		int[] carnumber = new int[1127];
		int[] people = new int[1127];
		int[]money = {35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,56,57,58,59,60,61,62,63,64,65,66,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,118,118,118,118,118,118,118,118,118,118,118,118,119,119,119,119,119,119,119,119,119,119,119,119,120,120,120,120,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,121,121,121,121,122,122,122,122,122,122,122,122,122,122,122,122,123,123,123,123,123,123,123,123,123,123,123,123,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,127,127,127,127,127,127,127,127,127,127,128,128,128,128,128,128,128,128,128,128,129,129,129,129,129,129,129,129,129,129,130,130,130,130,130,130,130,130,130,130,131,131,131,131,131,131,131,131,131,131,132,132,132,132,132,132,132,132,132,132,133,133,133,133,133,133,133,133,133,133,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,136,136,136,136,136,136,136,136,136,137,137,137,137,137,137,137,137,137,138,138,138,138,138,138,138,138,138,139,139,139,139,139,139,139,139,139,140,140,140,140,140,140,140,140,140,141,141,141,141,141,141,141,141,141,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,144,144,144,144,144,144,144,144,144,145,145,145,145,145,145,145,145,145,146,146,146,146,146,146,146,147,147,147,147,147,147,147,148,148,148,148,148,148,148,149,149,149,149,149,149,149,150,150,150,150,150,150,150,151,151,151,151,151,151,151,152,152,152,152,152,152,152,153,153,153,153,153,153,153,154,154,154,154,154,154,154,155,155,155,155,155,155,155,156,156,156,156,156,156,156,157,157,157,157,157,157,157,158,158,158,158,158,158,158,159,159,159,159,159,159,159,160,160,160,160,160,160,160,161,161,161,161,161,161,161,162,162,162,162,162,162,162,163,163,163,163,163,163,163,164,164,164,164,164,164,164,165,165,165,165,165,165,165,166,166,166,166,166,166,166,167,167,167,167,167,167,167,168,168,168,168,168,168,168,169,169,169,169,169,169,169,170,170,170,170,170,170,170,171,171,171,171,171,171,171,172,172,172,172,172,172,172,173,173,173,173,173,173,173,174,174,174,174,174,174,174,175,175,175,175,175,175,175,176,176,176,176,176,176,176,177,177,177,177,177,177,178,178,178,178,178,178,179,179,179,179,179,179,180,180,180,180,180,180,181,181,181,181,181,181,182,182,182,182,182,182,183,183,183,183,183,183,184,184,184,184,184,184,185,185,185,185,185,185,186,186,186,186,186,186,187,187,187,187,187,187,188,188,188,188,188,188,189,189,189,189,189,189,190,190,190,190,190,190,191,191,191,191,191,191,192,192,192,192,192,192,193,193,193,193,193,193,194,194,194,194,194,194,195,195,195,195,195,195,196,196,196,196,196,196,197,197,197,197,198,198,198,198,199,199,199,199,200,200,200,200,201,201,201,201,202,202,202,202,203,203,203,203,204,204,204,204,205,205,205,205,206,206,206,206,207,207,207,207,208,208,208,208,209,209,209,209,210,210,210,210,211,211,211,211,212,212,212,212,213,213,213,213,214,214,214,215,215,215,216,216,216,217,217,217,218,218,218,219,219,219,220,220,220};
		Scanner sc = new Scanner(System.in);
		for(int i=0;i<1126;i++) {
			edtime[i] = "2014-01-25 "+sc.next()+":00";
			if(i>=0&&i<30) {
				carnumber[i] = 246;
				people[i] = 5;
			}
			if(i>=30&&i<55) {
				carnumber[i] = 164;
				people[i] = 5;
			}
			if(i>=55&&i<70) {
				carnumber[i] = 23;
				people[i] = 6;
			}
			if(i>=70&&i<87) {
				carnumber[i] = 17;
				people[i] = 5;
			}
			if(i>=87&&i<106) {
				carnumber[i] = 43;
				people[i] = 4;
			}
			if(i>=106&&i<138) {
				carnumber[i] = 32;
				people[i] = 4;
			}
			if(i>=138&&i<148) {
				carnumber[i] = 233;
				people[i] = 43;
			}
			if(i>=148&&i<155) {
				carnumber[i] = 122;
				people[i] = 66;
			}
			if(i>=155&&i<171) {
				carnumber[i] = 259;
				people[i] = 32;
			}
			if(i>=171&&i<222) {
				carnumber[i] = 184;
				people[i] = 9;
			}
			if(i>=222&&i<278) {
				carnumber[i] = 303;
				people[i] = 7;
			}
			if(i>=278&&i<340) {
				carnumber[i] = 508;
				people[i] = 8;
			}
			if(i>=340&&i<401) {
				carnumber[i] = 380;
				people[i] = 8;
			}
			if(i>=401&&i<435) {
				carnumber[i] = 458;
				people[i] = 20;
			}
			if(i>=435&&i<499) {
				carnumber[i] = 391;
				people[i] = 11;
			}
			if(i>=499&&i<558) {
				carnumber[i] = 628;
				people[i] = 13;
			}
			if(i>=558&&i<616) {
				carnumber[i] = 773;
				people[i] = 15;
			}
			if(i>=616&&i<693) {
				carnumber[i] = 633;
				people[i] = 12;
			}
			if(i>=693&&i<743) {
				carnumber[i] = 536;
				people[i] = 9;
			}
			if(i>=743&&i<815) {
				carnumber[i] = 587;
				people[i] = 7;
			}
			if(i>=815&&i<884) {
				carnumber[i] = 523;
				people[i] = 6;
			}
			if(i>=884&&i<965) {
				carnumber[i] = 811;
				people[i] = 5;
			}
			if(i>=965&&i<1047) {
				carnumber[i] = 837;
				people[i] = 3;
			}
			if(i>=1047&&i<1126) {
				carnumber[i] = 463;
				people[i] = 2;
			}
		}
		double[] ans = new double[1440];
		int[] select = new int[1440];
		int js = 0;
		for(int z=0;z<24;z++) {
			for(int w=0;w<60;w++) {
				String bgtime = "";
				if(z < 10) {
					if(w < 10) {
						bgtime = "2014-01-25 0" + z + ":0" + w +":00";
					}else {
						bgtime = "2014-01-25 0" + z + ":" + w +":00";
					}
				}else {
					if(w < 10) {
						bgtime = "2014-01-25 " + z + ":0" + w +":00";
					}else {
						bgtime = "2014-01-25 " + z + ":" + w +":00";
					}
				}
				
//				String bgtime = "2014-01-25 " + sc.next() +":00";
				int bookhour = dateToStamp2("2014-01-25 00:00:00",bgtime);
				int book = 0;
				switch(bookhour) {
					case 0:
						book = 0;
						break;
					case 1:
						book = 30;
						break;
					case 2:
						book = 55;
						break;
					case 3:
						book = 70;
						break;
					case 4:
						book = 87;
						break;
					case 5:
						book = 106;
						break;
					case 6:
						book = 138;
						break;
					case 7:
						book = 148;
						break;
					case 8:
						book = 155;
						break;
					case 9:
						book = 171;
						break;
					case 10:
						book = 222;
						break;
					case 11:
						book = 278;
						break;
					case 12:
						book = 340;
						break;
					case 13:
						book = 401;
						break;
					case 14:
						book = 435;
						break;
					case 15:
						book = 499;
						break;
					case 16:
						book = 558;
						break;
					case 17:
						book = 616;
						break;
					case 18:
						book = 693;
						break;
					case 19:
						book = 743;
						break;
					case 20:
						book = 815;
						break;
					case 21:
						book = 884;
						break;
					case 22:
						book = 965;
						break;
					case 23:
						book = 1047;
						break;
				}
				int bookcar = carnumber[book];
				int flag = book;
				while(bookcar > 0) {
					bookcar -= people[book];
					flag = book;
					book++;
					if(book == 1127) {
						break;
					}
				}
				if(book != 1127) {
					int ans1 = dateToStamp1(bgtime,edtime[flag]);
					if(ans1<0) ans1 = 0;
					int number1 = new Random().nextInt(4949);
					double ans2;
//					System.out.println(money[number1]);
					if(ans1 == 0)
						ans2 =(double)money[number1];
					else
						ans2 =(double)money[number1]/ans1;
					
					int number2 = new Random().nextInt(4949);
//					System.out.println(money[number2]);
					double ans3 = (double)(money[number2]-24)/54;
					
//					System.out.println(edtime[flag]);
					
					BigDecimal data1 = new BigDecimal(ans2);
					BigDecimal data2 = new BigDecimal(ans3);
					if(data1.compareTo(data2)==-1) {
//						System.out.println("司机决定返回市区接客，收益为："+ ans3 +"(元/分钟)");
						System.out.println("无穷");
					}else if(data1.compareTo(data2)==1) {
//						System.out.println("司机决定留在机场接客，收益为："+ ans2 +"(元/分钟)"+ "  等待时间："+ ans1);
						System.out.println(ans1);
					}else {
//						System.out.println("两个决策的收益一样，收益为："+ ans2 +"(元/分钟)");
						System.out.println(ans1);
					}	
				}else {
					int number2 = new Random().nextInt(4950);
//					System.out.println(money[number2]);
					double ans3 = (double)(money[number2]-24)/54;
//					System.out.println("司机仅能选择决策——返回市区，此时收益为："+ ans3 +"(元/分钟)");
					System.out.println("无穷");
				}
			}
		}
/*
		int []kkk = new int[60];
		for(int i=0;i<60;i++) {
			int r = new Random().nextInt(1440);
			kkk[i] = r; 
			switch(r/60) {
				case 0:
					System.out.println(224);
					break;
				case 1:
					System.out.println(149);
					break;
				case 2:
					System.out.println(0);
					break;
				case 3:
					System.out.println(0);
					break;
				case 4:
					System.out.println(39);
					break;
				case 5:
					System.out.println(29);
					break;
				case 6:
					System.out.println(212);
					break;
				case 7:
					System.out.println(111);
					break;
				case 8:
					System.out.println(235);
					break;
				case 9:
					System.out.println(167);
					break;
				case 10:
					System.out.println(275);
					break;
				case 11:
					System.out.println(462);
					break;
				case 12:
					System.out.println(345);
					break;
				case 13:
					System.out.println(416);
					break;
				case 14:
					System.out.println(355);
					break;
				case 15:
					System.out.println(571);
					break;
				case 16:
					System.out.println(703);
					break;
				case 17:
					System.out.println(575);
					break;
				case 18:
					System.out.println(487);
					break;
				case 19:
					System.out.println(534);
					break;
				case 20:
					System.out.println(475);
					break;
				case 21:
					System.out.println(737);
					break;
				case 22:
					System.out.println(761);
					break;
				case 23:
					System.out.println(421);
					break;
			}
			System.out.println(ans[r]);
		}
		System.out.println("===========");
		for(int i=0;i<60;i++) {
			System.out.println(select[kkk[i]]);
		}
*/
	}
}